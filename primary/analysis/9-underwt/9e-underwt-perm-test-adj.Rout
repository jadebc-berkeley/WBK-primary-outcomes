
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##############################################
> # WASH Benefits Kenya
> # Primary outcome analysis 
> 
> # Underwt adjusted analysis
> # Permutation tests: non-parametric Wilcoxon signed rank test statistic
> # 2-sided p-values
> 
> # Note: this code does not use the washb R package
> # However, the results are replicated with the washb_permute function
> 
> # by Jade (jadebc@berkeley.edu)
> ##############################################
> 
> rm(list=ls())
> 
> library(reshape2)
> library(coin)
Loading required package: survival
Warning message:
package ‘coin’ was built under R version 3.2.5 
> library(plyr)
Warning message:
package ‘plyr’ was built under R version 3.2.5 
> library(washb)
Welcome to the washb package
Version: 0.2.0
Created on 2016-10-12

The package's reference manual and vignette are also online:
https://ben-arnold.github.io/washb

> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-21
Package created on 2016-11-11

Warning message:
package ‘SuperLearner’ was built under R version 3.2.5 
> 
> source("~/documents/crg/wash-benefits/kenya/src/primary/analysis/0-base-programs.R")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> m=read.csv("~/Dropbox/WASHB-Kenya-Data/1-primary-outcome-datasets/midline-anthro.csv")
> e=read.csv("~/Dropbox/WASHB-Kenya-Data/1-primary-outcome-datasets/endline-anthro.csv")
> 
> m1=preprocess.anthro(m, "underwt")
> e1=preprocess.anthro(e, "underwt")
> 
> m2=preprocess.adj(m1,y="underwt",time=1)
> e2=preprocess.adj(e1,y="underwt",time=2)
> 
> # --------------------------------------
> # select covariates that are associated with the 
> # outcome
> # --------------------------------------
> W=c("month","HHS","aged","sex","mother_age","motherht","mother_edu",
+     "u18","Ncomp","water_time","floor","roof","cow",
+     "goat","chicken","dog","elec","radio","tv","mobilephone",
+     "clock","bicycle","motorcycle","stove","staffid")
> 
> # ensure relevant covariates are defined as factors, create indicators
> m2$block=as.factor(m2$block)
> e2$block=as.factor(e2$block)
> m2$month=as.factor(m2$month)
> e2$month=as.factor(e2$month)
> 
> W_screen_m=washb_prescreen(Y=m2$underwt, Ws=m2[,W], family="binomial")

Likelihood Ratio Test P-values:
            P-value
month       0.00858
HHS         0.26055
aged        0.00128
sex         0.00004
mother_age  0.31194
motherht    0.00000
mother_edu  0.00000
u18         0.00460
Ncomp       0.24949
water_time  0.45854
floor       0.01859
roof        0.02576
cow         0.03914
goat        0.85061
chicken     0.00020
dog         0.88263
elec        0.29193
radio       0.00059
tv          0.00283
mobilephone 0.00008
clock       0.32068
bicycle     0.29194
motorcycle  0.36233
stove       0.01455
staffid     0.16733


Covariates selected (P<0.2):
                 P-value
month       8.580553e-03
aged        1.278118e-03
sex         3.785347e-05
motherht    2.321532e-06
mother_edu  6.013892e-09
u18         4.600458e-03
floor       1.858596e-02
roof        2.575565e-02
cow         3.914287e-02
chicken     2.002745e-04
radio       5.936276e-04
tv          2.825026e-03
mobilephone 8.294516e-05
stove       1.455003e-02
staffid     1.673319e-01
> W_screen_e=washb_prescreen(Y=e2$underwt, Ws=e2[,W], family="binomial")

Likelihood Ratio Test P-values:
            P-value
month       0.33657
HHS         0.35975
aged        0.60239
sex         0.00005
mother_age  0.46515
motherht    0.00000
mother_edu  0.00000
u18         0.00018
Ncomp       0.37211
water_time  0.70012
floor       0.00074
roof        0.38976
cow         0.00015
goat        0.52179
chicken     0.00000
dog         0.00931
elec        0.05020
radio       0.00171
tv          0.00003
mobilephone 0.00000
clock       0.00229
bicycle     0.03558
motorcycle  0.13727
stove       0.00001
staffid     0.55092


Covariates selected (P<0.2):
                 P-value
sex         5.204549e-05
motherht    6.711857e-16
mother_edu  7.028762e-15
u18         1.836409e-04
floor       7.434157e-04
cow         1.532995e-04
chicken     2.488099e-09
dog         9.305920e-03
elec        5.020386e-02
radio       1.711694e-03
tv          2.892685e-05
mobilephone 5.499605e-07
clock       2.291513e-03
bicycle     3.557573e-02
motorcycle  1.372686e-01
stove       1.449296e-05
> 
> # subset data frame to Ws selected in prescreening
> mW=m2[,c("block","underwt","clusterid","hhid","childid","tr",W_screen_m)]
> eW=e2[,c("block","underwt","clusterid","hhid","childid","tr",W_screen_e)]
> 
> # subset to complete cases
> mW=mW[complete.cases(mW),]
> eW=eW[complete.cases(eW),]
> 
> # reordering datasets
> mW=mW[order(mW$block,mW$clusterid,mW$hhid,mW$childid),]
> eW=eW[order(eW$block,eW$clusterid,eW$hhid,eW$childid),]
> 
> #-------------------------------------------
> # run SuperLearner
> #-------------------------------------------
> # define SuperLearner libraries
> SL.library<-list("SL.mean","SL.glm","SL.bayesglm","SL.gam","SL.glmnet")
> # for adjusted permutation test, fit model of outcome
> # as a function of covariates excluding treatment assignment
> 
> sl.m=sl.prep(mW,y="underwt")

Number of obs in analysis data frame
[1] 6067
> sl.e=sl.prep(eW,y="underwt")

Number of obs in analysis data frame
[1] 6231
> colnames(sl.m$A)
 [1] "aged"                       "motherht"                  
 [3] "u18"                        "cow"                       
 [5] "chicken"                    "month2"                    
 [7] "month3"                     "month4"                    
 [9] "month5"                     "month6"                    
[11] "month10"                    "month11"                   
[13] "month12"                    "sexMale"                   
[15] "mothereduAnysecondary"      "mothereduCompleteprimary"  
[17] "floorCementconcrete"        "floorMissingDK"            
[19] "roofIronother"              "radioHasradio"             
[21] "tvOwnsTV"                   "mobilephoneAnymobilephones"
[23] "stoveHasstove"              "staffid2311"               
[25] "staffid2321"                "staffid3448"               
[27] "staffid3500"                "staffid4312"               
[29] "staffid4317"                "staffid4518"               
[31] "staffid4648"                "staffid5423"               
[33] "staffid7840"               
> colnames(sl.e$A)
 [1] "motherht"                   "u18"                       
 [3] "cow"                        "chicken"                   
 [5] "dog"                        "sexMale"                   
 [7] "mothereduAnysecondary"      "mothereduCompleteprimary"  
 [9] "floorCementconcrete"        "floorMissingDK"            
[11] "elecHaselectricity"         "radioHasradio"             
[13] "tvOwnsTV"                   "mobilephoneAnymobilephones"
[15] "clockHasclock"              "bicycleHasbicycle"         
[17] "motorcycleNomotorcycle"     "stoveHasstove"             
> 
> # fit model
> set.seed(67890)
> sl.m.fit=SuperLearner(Y=sl.m$Y, X=sl.m$A, SL.library=SL.library,
+      id=sl.m$clusterid,family="binomial",method="method.NNLS")
Loading required package: arm
Loading required package: MASS
Loading required package: Matrix
Loading required package: lme4

arm (Version 1.8-6, built: 2015-7-7)

Working directory is /Users/jadederong/Documents/CRG/wash-benefits/kenya/src/primary/analysis/9-underwt

Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12

Loading required package: glmnet
Loaded glmnet 2.0-2

> sl.m.fit

Call:  
SuperLearner(Y = sl.m$Y, X = sl.m$A, family = "binomial", SL.library = SL.library,  
    method = "method.NNLS", id = sl.m$clusterid) 


                      Risk     Coef
SL.mean_All     0.06189837 0.302934
SL.glm_All      0.06141769 0.000000
SL.bayesglm_All 0.06140605 0.000000
SL.gam_All      0.06118215 0.697066
SL.glmnet_All   0.06119303 0.000000
> 
> set.seed(67890)
> sl.e.fit=SuperLearner(Y=sl.e$Y, X=sl.e$A, SL.library=SL.library,
+      id=sl.e$clusterid,family="binomial",method="method.NNLS")
> sl.e.fit

Call:  
SuperLearner(Y = sl.e$Y, X = sl.e$A, family = "binomial", SL.library = SL.library,  
    method = "method.NNLS", id = sl.e$clusterid) 


                      Risk      Coef
SL.mean_All     0.08299605 0.1300365
SL.glm_All      0.08107029 0.0000000
SL.bayesglm_All 0.08101763 0.0000000
SL.gam_All      0.08067100 0.8699635
SL.glmnet_All   0.08099308 0.0000000
> 
> # generate residuals
> resid.m=sl.m$Y - sl.m.fit$SL.predict
> resid.e=sl.e$Y - sl.e.fit$SL.predict
> 
> # save predicted values and treatment assignments in data frame
> resid.df.m=data.frame(block=mW$block,tr=mW$tr,underwt=resid.m)
> resid.df.e=data.frame(block=eW$block,tr=eW$tr,underwt=resid.e)
> 
> #----------------------------------------------
> # H1: P-value from permutation test for adjusted 
> # differences; each arm vs. control
> #----------------------------------------------
> # midline
> P.t1.df=coin.prep(resid.df.m,tx="Passive Control",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "23" "40" "49" "54" "56" "65" "72" "85" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2055"
[1] "N after dropping blocks: 1984"
[1] "Number of blocks included: 78"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "40" "49" "54" "56" "65" "72" "85"
> nrow(P.t1.df)
[1] 156
> set.seed(67890)
> P.t1.permtest=wilcoxsign_test(underwt~tr | block, data=P.t1.df,
+     distribution=approximate(B=100000))
> P.t1.perm.p=pvalue(P.t1.permtest)
> 
> W.t1.df=coin.prep(resid.df.m,tx="Water",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2037"
[1] "N after dropping blocks: 1930"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "85"
> nrow(W.t1.df)
[1] 152
> set.seed(67890)
> W.t1.permtest=wilcoxsign_test(underwt~tr | block, data=W.t1.df,
+       distribution=approximate(B=100000))
> W.t1.perm.p=pvalue(W.t1.permtest)
> 
> S.t1.df=coin.prep(resid.df.m,tx="Sanitation",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2028"
[1] "N after dropping blocks: 1948"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85"
> nrow(S.t1.df)
[1] 152
> set.seed(67890)
> S.t1.permtest=wilcoxsign_test(underwt~tr | block, data=S.t1.df,
+       distribution=approximate(B=100000))
> S.t1.perm.p=pvalue(S.t1.permtest)
> 
> H.t1.df=coin.prep(resid.df.m,tx="Handwashing",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2033"
[1] "N after dropping blocks: 1959"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85"
> nrow(H.t1.df)
[1] 154
> set.seed(67890)
> H.t1.permtest=wilcoxsign_test(underwt~tr | block, data=H.t1.df,
+       distribution=approximate(B=100000))
> H.t1.perm.p=pvalue(H.t1.permtest)
> 
> WSH.t1.df=coin.prep(resid.df.m,tx="WSH",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85" "11" "13"
[16] "20" "40" "85"
[1] "N before dropping blocks: 2065"
[1] "N after dropping blocks: 1951"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85"
> nrow(WSH.t1.df)
[1] 150
> set.seed(67890)
> WSH.t1.permtest=wilcoxsign_test(underwt~tr | block, data=WSH.t1.df,
+       distribution=approximate(B=100000))
> WSH.t1.perm.p=pvalue(WSH.t1.permtest)
> 
> N.t1.df=coin.prep(resid.df.m,tx="Nutrition",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "11" "13" "20" "40"
[16] "85"
[1] "N before dropping blocks: 2013"
[1] "N after dropping blocks: 1880"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "85"
> nrow(N.t1.df)
[1] 150
> set.seed(67890)
> N.permtest=wilcoxsign_test(underwt~tr | block, data=N.t1.df,
+       distribution=approximate(B=100000))
> N.t1.perm.p=pvalue(N.permtest)
> 
> WSHN.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2080"
[1] "N after dropping blocks: 1995"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "40" "49" "65" "72" "80" "84" "85"
> nrow(WSHN.t1.df)
[1] 154
> set.seed(67890)
> WSHN.t1.permtest=wilcoxsign_test(underwt~tr | block, data=WSHN.t1.df,
+       distribution=approximate(B=100000))
> WSHN.t1.perm.p=pvalue(WSHN.t1.permtest)
> 
> underwt_t1_h1_pval_adj_j=data.frame(perm.pvalue=c(P.t1.perm.p,W.t1.perm.p,S.t1.perm.p,H.t1.perm.p,
+         WSH.t1.perm.p,N.t1.perm.p,WSHN.t1.perm.p))
> rownames(underwt_t1_h1_pval_adj_j)=c("Passive Control vs. C","Water vs. C",
+     "Sanitation vs. C", "Handwashing vs. C", "WSH vs. C",
+     "Nutrition vs. C", "Nutrition + WSH vs. C")
> 
> 
> # endline
> P.t2.df=coin.prep(resid.df.e,tx="Passive Control",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "23" "40" "49" "54" "56" "65" "72" "85" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2115"
[1] "N after dropping blocks: 2038"
[1] "Number of blocks included: 78"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "40" "49" "54" "56" "65" "72" "85"
> nrow(P.t2.df)
[1] 156
> set.seed(67890)
> P.t2.permtest=wilcoxsign_test(underwt~tr | block, data=P.t2.df,
+       distribution=approximate(B=100000))
> P.t2.perm.p=pvalue(P.t2.permtest)
> 
> W.t2.df=coin.prep(resid.df.e,tx="Water",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2126"
[1] "N after dropping blocks: 2018"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "85"
> nrow(W.t2.df)
[1] 152
> set.seed(67890)
> W.t2.permtest=wilcoxsign_test(underwt~tr | block, data=W.t2.df,
+       distribution=approximate(B=100000))
> W.t2.perm.p=pvalue(W.t2.permtest)
> 
> S.t2.df=coin.prep(resid.df.e,tx="Sanitation",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2138"
[1] "N after dropping blocks: 2046"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85"
> nrow(S.t2.df)
[1] 152
> set.seed(67890)
> S.t2.permtest=wilcoxsign_test(underwt~tr | block, data=S.t2.df,
+       distribution=approximate(B=100000))
> S.t2.perm.p=pvalue(S.t2.permtest)
> 
> H.t2.df=coin.prep(resid.df.e,tx="Handwashing",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2099"
[1] "N after dropping blocks: 2017"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85"
> nrow(H.t2.df)
[1] 154
> set.seed(67890)
> H.t2.permtest=wilcoxsign_test(underwt~tr | block, data=H.t2.df,
+       distribution=approximate(B=100000))
> H.t2.perm.p=pvalue(H.t2.permtest)
> 
> WSH.t2.df=coin.prep(resid.df.e,tx="WSH",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85" "11" "13"
[16] "20" "40" "85"
[1] "N before dropping blocks: 2122"
[1] "N after dropping blocks: 2000"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85"
> nrow(WSH.t2.df)
[1] 150
> set.seed(67890)
> WSH.t2.permtest=wilcoxsign_test(underwt~tr | block, data=WSH.t2.df,
+       distribution=approximate(B=100000))
> WSH.t2.perm.p=pvalue(WSH.t2.permtest)
> 
> N.t2.df=coin.prep(resid.df.e,tx="Nutrition",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "11" "13" "20" "40"
[16] "85"
[1] "N before dropping blocks: 2085"
[1] "N after dropping blocks: 1943"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "85"
> nrow(N.t2.df)
[1] 150
> set.seed(67890)
> N.t2.permtest=wilcoxsign_test(underwt~tr | block, data=N.t2.df,
+       distribution=approximate(B=100000))
> N.t2.perm.p=pvalue(N.t2.permtest)
> 
> WSHN.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="Control",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2150"
[1] "N after dropping blocks: 2058"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "40" "49" "65" "72" "80" "84" "85"
> nrow(WSHN.t2.df)
[1] 154
> set.seed(67890)
> WSHN.t2.permtest=wilcoxsign_test(underwt~tr | block, data=WSHN.t2.df,
+       distribution=approximate(B=100000))
> WSHN.t2.perm.p=pvalue(WSHN.t2.permtest)
> 
> underwt_t2_h1_pval_adj_j=data.frame(perm.pvalue=c(P.t2.perm.p,W.t2.perm.p,S.t2.perm.p,H.t2.perm.p,
+         WSH.t2.perm.p,N.t2.perm.p,WSHN.t2.perm.p))
> rownames(underwt_t2_h1_pval_adj_j)=c("Passive Control vs. C","Water vs. C",
+      "Sanitation vs. C", "Handwashing vs. C", "WSH vs. C",
+      "Nutrition vs. C", "Nutrition + WSH vs. C")
> 
> #----------------------------------------------
> # H3: P-value from permutation test for adjusted 
> # differences; WSHN vs. N and WSHN vs. WSH
> #----------------------------------------------
> # midline
> WSHN.N.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="Nutrition",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "20" "23" "30" "33" "40"
[16] "51" "54" "56" "65" "72" "84"
[1] "N before dropping blocks: 1345"
[1] "N after dropping blocks: 1283"
[1] "Number of blocks included: 74"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "49" "51" "54" "56" "65" "72" "80" "84"
> nrow(WSHN.N.t1.df)
[1] 148
> set.seed(67890)
> WSHN.N.t1.permtest=wilcoxsign_test(underwt~tr | block, data=WSHN.N.t1.df,
+       distribution=approximate(B=100000))
> WSHN.N.t1.perm.p=pvalue(WSHN.N.t1.permtest)
> 
> WSHN.WSH.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="WSH",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "13" "20" "23" "25" "33"
[16] "40" "49" "54" "56" "61" "65" "72" "85"
[1] "N before dropping blocks: 1397"
[1] "N after dropping blocks: 1336"
[1] "Number of blocks included: 73"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "80" "84"
[16] "85"
> nrow(WSHN.WSH.t1.df)
[1] 146
> set.seed(67890)
> WSHN.WSH.t1.permtest=wilcoxsign_test(underwt~tr | block, data=WSHN.WSH.t1.df,
+       distribution=approximate(B=100000))
> WSHN.WSH.t1.perm.p=pvalue(WSHN.WSH.t1.permtest)
> 
> underwt_t1_h3_pval_adj_j=data.frame(perm.pvalue=c(WSHN.N.t1.perm.p,WSHN.WSH.t1.perm.p))
> rownames(underwt_t1_h3_pval_adj_j)=c("Nutrition + WSH vs. Nutrition","Nutrition + WSH vs. WSH")
> 
> 
> # endline
> WSHN.N.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="Nutrition",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "20" "23" "30" "33" "40"
[16] "51" "54" "56" "65" "72" "84"
[1] "N before dropping blocks: 1367"
[1] "N after dropping blocks: 1308"
[1] "Number of blocks included: 74"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "49" "51" "54" "56" "65" "72" "80" "84"
> nrow(WSHN.N.t2.df)
[1] 148
> set.seed(67890)
> WSHN.N.t2.permtest=wilcoxsign_test(underwt~tr | block, data=WSHN.N.t2.df,
+       distribution=approximate(B=100000))
> WSHN.N.t2.perm.p=pvalue(WSHN.N.t2.permtest)
> 
> WSHN.WSH.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="WSH",y="underwt")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "13" "20" "23" "25" "33"
[16] "40" "49" "54" "56" "61" "65" "72" "85"
[1] "N before dropping blocks: 1404"
[1] "N after dropping blocks: 1339"
[1] "Number of blocks included: 73"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "80" "84"
[16] "85"
> nrow(WSHN.WSH.t2.df)
[1] 146
> set.seed(67890)
> WSHN.WSH.t2.permtest=wilcoxsign_test(underwt~tr | block, data=WSHN.WSH.t2.df,
+       distribution=approximate(B=100000))
> WSHN.WSH.t2.perm.p=pvalue(WSHN.WSH.t2.permtest)
> 
> underwt_t2_h3_pval_adj_j=data.frame(perm.pvalue=c(WSHN.N.t2.perm.p,WSHN.WSH.t2.perm.p))
> rownames(underwt_t2_h3_pval_adj_j)=c("Nutrition + WSH vs. Nutrition","Nutrition + WSH vs. WSH")
> 
> save(underwt_t1_h1_pval_adj_j,underwt_t1_h3_pval_adj_j,
+      file="~/Dropbox/WBK-primary-analysis/results/jade/underwt_t1_pval_adj.RData")
> 
> save(underwt_t2_h1_pval_adj_j,underwt_t2_h3_pval_adj_j,
+      file="~/Dropbox/WBK-primary-analysis/results/jade/underwt_t2_pval_adj.RData")
> 
> underwt_t1_h1_pval_adj_j
                      perm.pvalue
Passive Control vs. C     0.59516
Water vs. C               0.63844
Sanitation vs. C          0.43420
Handwashing vs. C         0.69321
WSH vs. C                 0.59361
Nutrition vs. C           0.56161
Nutrition + WSH vs. C     0.00556
> underwt_t1_h3_pval_adj_j
                              perm.pvalue
Nutrition + WSH vs. Nutrition     0.03000
Nutrition + WSH vs. WSH           0.03342
> underwt_t2_h1_pval_adj_j
                      perm.pvalue
Passive Control vs. C     0.56951
Water vs. C               0.74288
Sanitation vs. C          0.65917
Handwashing vs. C         0.43063
WSH vs. C                 0.69970
Nutrition vs. C           0.32453
Nutrition + WSH vs. C     0.11371
> underwt_t2_h3_pval_adj_j
                              perm.pvalue
Nutrition + WSH vs. Nutrition     0.53867
Nutrition + WSH vs. WSH           0.02635
> 
> 
> proc.time()
   user  system elapsed 
 55.836   1.644  59.345 
