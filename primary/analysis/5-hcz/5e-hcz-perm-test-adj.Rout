
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##############################################
> # WASH Benefits Kenya
> # Primary outcome analysis 
> 
> # hcz adjusted analysis
> # Permutation tests: non-parametric Wilcoxon signed rank 
> # test statistic
> # 2-sided p-values
> 
> # Note: this code does not use the washb R package
> # However, the results are replicated with the washb_permute function
> 
> # by Jade (jadebc@berkeley.edu)
> ##############################################
> 
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-21
Package created on 2016-11-11

Warning message:
package ‘SuperLearner’ was built under R version 3.2.5 
> library(reshape2)
> library(coin)
Loading required package: survival
Warning message:
package ‘coin’ was built under R version 3.2.5 
> library(washb)
Welcome to the washb package
Version: 0.2.0
Created on 2016-10-12

The package's reference manual and vignette are also online:
https://ben-arnold.github.io/washb

> 
> rm(list=ls())
> m=read.csv("~/Dropbox/WASHB-Kenya-Data/1-primary-outcome-datasets/midline-anthro.csv",stringsAsFactors=TRUE)
> e=read.csv("~/Dropbox/WASHB-Kenya-Data/1-primary-outcome-datasets/endline-anthro.csv",stringsAsFactors=TRUE)
> 
> source("~/documents/crg/wash-benefits/kenya/src/primary/analysis/0-base-programs.R")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> m1=preprocess.anthro(m, y="hcz")
> e1=preprocess.anthro(e, y="hcz")
> 
> m2=preprocess.adj(m1,y="hcz",time=1)
> e2=preprocess.adj(e1,y="hcz",time=2)
> 
> # --------------------------------------
> # select covariates that are associated with the 
> # outcome
> # --------------------------------------
> W=c("month","HHS","aged","sex","mother_age","motherht","mother_edu",
+     "u18","Ncomp","water_time","floor","roof","cow",
+     "goat","chicken","dog","elec","radio","tv","mobilephone",
+     "clock","bicycle","motorcycle","stove","staffid")
> 
> W_screen_m=washb_prescreen(Y=m2$hcz, Ws=m2[,W], family="gaussian")

Likelihood Ratio Test P-values:
            P-value
month       0.00002
HHS         0.07576
aged        0.00000
sex         0.00171
mother_age  0.00032
motherht    0.00000
mother_edu  0.00000
u18         0.43130
Ncomp       0.25506
water_time  0.64096
floor       0.00004
roof        0.02904
cow         0.00005
goat        0.83401
chicken     0.00005
dog         0.26533
elec        0.00994
radio       0.00034
tv          0.00003
mobilephone 0.00000
clock       0.09242
bicycle     0.12358
motorcycle  0.12936
stove       0.00000
staffid     0.00001


Covariates selected (P<0.2):
                 P-value
month       2.459486e-05
HHS         7.576418e-02
aged        1.264424e-09
sex         1.705646e-03
mother_age  3.242424e-04
motherht    8.157565e-12
mother_edu  2.947723e-12
floor       4.148534e-05
roof        2.903585e-02
cow         4.860442e-05
chicken     4.843181e-05
elec        9.941771e-03
radio       3.352169e-04
tv          2.846296e-05
mobilephone 3.805460e-12
clock       9.241542e-02
bicycle     1.235800e-01
motorcycle  1.293618e-01
stove       6.018552e-08
staffid     7.212765e-06
> W_screen_e=washb_prescreen(Y=e2$hcz, Ws=e2[,W], family="gaussian")

Likelihood Ratio Test P-values:
            P-value
month       0.00000
HHS         0.33739
aged        0.00001
sex         0.27712
mother_age  0.00000
motherht    0.00000
mother_edu  0.00000
u18         0.80296
Ncomp       0.13370
water_time  0.55114
floor       0.00000
roof        0.00158
cow         0.00000
goat        0.98926
chicken     0.00003
dog         0.06634
elec        0.00151
radio       0.00017
tv          0.00001
mobilephone 0.00000
clock       0.11892
bicycle     0.00784
motorcycle  0.00638
stove       0.00000
staffid     0.00000


Covariates selected (P<0.2):
                 P-value
month       1.901416e-14
aged        1.079466e-05
mother_age  3.361941e-07
motherht    8.437970e-16
mother_edu  4.319909e-20
Ncomp       1.336958e-01
floor       2.442555e-06
roof        1.579925e-03
cow         1.810638e-07
chicken     3.305436e-05
dog         6.634407e-02
elec        1.510585e-03
radio       1.683545e-04
tv          1.097535e-05
mobilephone 3.632579e-15
clock       1.189216e-01
bicycle     7.842050e-03
motorcycle  6.379213e-03
stove       6.158971e-09
staffid     3.145575e-09
> 
> # subset data frame to Ws selected in prescreening
> mW=m[,c("block","hcz","clusterid","tr",W_screen_m)]
> eW=e[,c("block","hcz","clusterid","tr",W_screen_e)]
> 
> # ensure relevant covariates are defined as factors, create indicators
> mW=m2[,c("block","hcz","clusterid","hhid","childid","tr",W_screen_m)]
> eW=e2[,c("block","hcz","clusterid","hhid","childid","tr",W_screen_e)]
> 
> if("month" %in% colnames(mW)){
+   mW$month=as.factor(mW$month)
+ }
> if("month" %in% colnames(eW)){
+   eW$month=as.factor(eW$month)
+ }
> 
> # subset to complete cases
> mW=mW[complete.cases(mW),]
> eW=eW[complete.cases(eW),]
> 
> # reordering datasets
> mW=mW[order(mW$block,mW$clusterid,mW$hhid,mW$childid),]
> eW=eW[order(eW$block,eW$clusterid,eW$hhid,eW$childid),]
> 
> #-------------------------------------------
> # run SuperLearner
> #-------------------------------------------
> # define SuperLearner libraries
> SL.library<-list("SL.mean","SL.glm","SL.bayesglm","SL.gam","SL.glmnet")
> # for adjusted permutation test, fit model of outcome
> # as a function of covariates excluding treatment assignment
> 
> sl.m=sl.prep(mW,y="hcz")

Number of obs in analysis data frame
[1] 6009
> sl.e=sl.prep(eW,y="hcz")

Number of obs in analysis data frame
[1] 6182
> colnames(sl.m$A)
 [1] "aged"                       "motherage"                 
 [3] "motherht"                   "cow"                       
 [5] "chicken"                    "month2"                    
 [7] "month3"                     "month4"                    
 [9] "month5"                     "month6"                    
[11] "month10"                    "month11"                   
[13] "month12"                    "HHSMissing"                
[15] "HHSModerate"                "HHSSevere"                 
[17] "sexMale"                    "mothereduAnysecondary"     
[19] "mothereduCompleteprimary"   "floorCementconcrete"       
[21] "floorMissingDK"             "roofIronother"             
[23] "elecHaselectricity"         "radioHasradio"             
[25] "tvOwnsTV"                   "mobilephoneAnymobilephones"
[27] "clockHasclock"              "bicycleHasbicycle"         
[29] "motorcycleNomotorcycle"     "stoveHasstove"             
[31] "staffid2311"                "staffid2321"               
[33] "staffid3448"                "staffid3500"               
[35] "staffid4312"                "staffid4317"               
[37] "staffid4518"                "staffid4648"               
[39] "staffid5423"                "staffid7840"               
> colnames(sl.e$A)
 [1] "aged"                       "motherage"                 
 [3] "motherht"                   "Ncomp"                     
 [5] "cow"                        "chicken"                   
 [7] "dog"                        "month2"                    
 [9] "month3"                     "month4"                    
[11] "month5"                     "month6"                    
[13] "month7"                     "month8"                    
[15] "month9"                     "month10"                   
[17] "month11"                    "month12"                   
[19] "mothereduAnysecondary"      "mothereduCompleteprimary"  
[21] "floorCementconcrete"        "floorMissingDK"            
[23] "roofIronother"              "elecHaselectricity"        
[25] "radioHasradio"              "tvOwnsTV"                  
[27] "mobilephoneAnymobilephones" "clockHasclock"             
[29] "bicycleHasbicycle"          "motorcycleNomotorcycle"    
[31] "stoveHasstove"              "staffid2321"               
[33] "staffid3448"                "staffid3500"               
[35] "staffid4312"                "staffid4317"               
[37] "staffid4648"                "staffid4838"               
[39] "staffid5423"                "staffid5451"               
[41] "staffid5605"                "staffid5618"               
[43] "staffid7838"                "staffid7840"               
[45] "staffid8217"                "staffid8247"               
[47] "staffid8601"                "staffid8603"               
> 
> # fit model
> set.seed(67890)
> sl.m.fit=SuperLearner(Y=sl.m$Y, X=sl.m$A, SL.library=SL.library,
+      id=sl.m$clusterid,family="gaussian",method="method.NNLS")
Loading required package: arm
Loading required package: MASS
Loading required package: Matrix
Loading required package: lme4

arm (Version 1.8-6, built: 2015-7-7)

Working directory is /Users/jadederong/Documents/CRG/wash-benefits/kenya/src/primary/analysis/5-hcz

Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12

Loading required package: glmnet
Loaded glmnet 2.0-2

> sl.m.fit

Call:  
SuperLearner(Y = sl.m$Y, X = sl.m$A, family = "gaussian", SL.library = SL.library,  
    method = "method.NNLS", id = sl.m$clusterid) 


                    Risk      Coef
SL.mean_All     1.034397 0.1751222
SL.glm_All      1.002870 0.0000000
SL.bayesglm_All 1.002777 0.2263039
SL.gam_All      1.002676 0.5985740
SL.glmnet_All   1.002296 0.0000000
> 
> set.seed(67890)
> sl.e.fit=SuperLearner(Y=sl.e$Y, X=sl.e$A, SL.library=SL.library,
+      id=sl.e$clusterid,family="gaussian",method="method.NNLS")
> sl.e.fit

Call:  
SuperLearner(Y = sl.e$Y, X = sl.e$A, family = "gaussian", SL.library = SL.library,  
    method = "method.NNLS", id = sl.e$clusterid) 


                     Risk       Coef
SL.mean_All     1.0161515 0.06608059
SL.glm_All      0.9728794 0.16373399
SL.bayesglm_All 0.9728727 0.00000000
SL.gam_All      0.9732405 0.24995380
SL.glmnet_All   0.9715475 0.52023162
> 
> # generate residuals
> resid.m=sl.m$Y - sl.m.fit$SL.predict
> resid.e=sl.e$Y - sl.e.fit$SL.predict
> 
> # save predicted values and treatment assignments in data frame
> resid.df.m=data.frame(block=mW$block,tr=mW$tr,hcz=resid.m)
> resid.df.e=data.frame(block=eW$block,tr=eW$tr,hcz=resid.e)
> 
> #----------------------------------------------
> # H1: P-value from permutation test for adjusted 
> # differences; each arm vs. control
> #----------------------------------------------
> # midline
> P.t1.df=coin.prep(resid.df.m,tx="Passive Control",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "22" "47" "52" "54" "63" "70" "12" "19"
[1] "N before dropping blocks: 2035"
[1] "N after dropping blocks: 1965"
[1] "Number of blocks included: 78"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "40" "49" "54" "56" "65" "72" "85"
> nrow(P.t1.df)
[1] 156
> set.seed(67890)
> P.t1.permtest=wilcoxsign_test(hcz~tr | block, data=P.t1.df,
+     distribution=approximate(B=100000))
> P.t1.perm.p=pvalue(P.t1.permtest)
> 
> W.t1.df=coin.prep(resid.df.m,tx="Water",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "20" "30" "34" "45" "66" "68" "76" "80" "81"
[1] "N before dropping blocks: 2018"
[1] "N after dropping blocks: 1912"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "85"
> nrow(W.t1.df)
[1] 152
> set.seed(67890)
> W.t1.permtest=wilcoxsign_test(hcz~tr | block, data=W.t1.df,
+       distribution=approximate(B=100000))
> W.t1.perm.p=pvalue(W.t1.permtest)
> 
> S.t1.df=coin.prep(resid.df.m,tx="Sanitation",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "31" "46" "51" "58" "62" "69" "77" "81" "11"
[1] "N before dropping blocks: 2011"
[1] "N after dropping blocks: 1933"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85"
> nrow(S.t1.df)
[1] 152
> set.seed(67890)
> S.t1.permtest=wilcoxsign_test(hcz~tr | block, data=S.t1.df,
+       distribution=approximate(B=100000))
> S.t1.perm.p=pvalue(S.t1.permtest)
> 
> H.t1.df=coin.prep(resid.df.m,tx="Handwashing",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "30" "45" "47" "50" "52" "53" "61"
[1] "N before dropping blocks: 2017"
[1] "N after dropping blocks: 1943"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85"
> nrow(H.t1.df)
[1] 154
> set.seed(67890)
> H.t1.permtest=wilcoxsign_test(hcz~tr | block, data=H.t1.df,
+       distribution=approximate(B=100000))
> H.t1.perm.p=pvalue(H.t1.permtest)
> 
> WSH.t1.df=coin.prep(resid.df.m,tx="WSH",cont="Control",y="hcz")
[1] "Blocks dropped:"
 [1] "21" "23" "31" "46" "51" "53" "58" "62" "69" "11"
[1] "N before dropping blocks: 2051"
[1] "N after dropping blocks: 1939"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85"
> nrow(WSH.t1.df)
[1] 150
> set.seed(67890)
> WSH.t1.permtest=wilcoxsign_test(hcz~tr | block, data=WSH.t1.df,
+       distribution=approximate(B=100000))
> WSH.t1.perm.p=pvalue(WSH.t1.permtest)
> 
> N.t1.df=coin.prep(resid.df.m,tx="Nutrition",cont="Control",y="hcz")
[1] "Blocks dropped:"
 [1] "22" "29" "32" "49" "52" "54" "63" "70" "82" "11" "13" "83"
[1] "N before dropping blocks: 1997"
[1] "N after dropping blocks: 1865"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "85"
> nrow(N.t1.df)
[1] 150
> set.seed(67890)
> N.permtest=wilcoxsign_test(hcz~tr | block, data=N.t1.df,
+       distribution=approximate(B=100000))
> N.t1.perm.p=pvalue(N.permtest)
> 
> WSHN.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "20" "30" "46" "62" "69" "77" "81" "37" "82"
[1] "N before dropping blocks: 2058"
[1] "N after dropping blocks: 1974"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "40" "49" "65" "72" "80" "84" "85"
> nrow(WSHN.t1.df)
[1] 154
> set.seed(67890)
> WSHN.t1.permtest=wilcoxsign_test(hcz~tr | block, data=WSHN.t1.df,
+       distribution=approximate(B=100000))
> WSHN.t1.perm.p=pvalue(WSHN.t1.permtest)
> 
> hcz_t1_h1_pval_adj_j=data.frame(perm.pvalue=c(P.t1.perm.p,W.t1.perm.p,S.t1.perm.p,H.t1.perm.p,
+         WSH.t1.perm.p,N.t1.perm.p,WSHN.t1.perm.p))
> rownames(hcz_t1_h1_pval_adj_j)=c("Passive Control vs. C","Water vs. C",
+     "Sanitation vs. C", "Handwashing vs. C", "WSH vs. C",
+     "Nutrition vs. C", "Nutrition + WSH vs. C")
> 
> 
> # endline
> P.t2.df=coin.prep(resid.df.e,tx="Passive Control",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "22" "47" "52" "54" "63" "70" "12" "19"
[1] "N before dropping blocks: 2094"
[1] "N after dropping blocks: 2018"
[1] "Number of blocks included: 78"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "40" "49" "54" "56" "65" "72" "85"
> nrow(P.t2.df)
[1] 156
> set.seed(67890)
> P.t2.permtest=wilcoxsign_test(hcz~tr | block, data=P.t2.df,
+       distribution=approximate(B=100000))
> P.t2.perm.p=pvalue(P.t2.permtest)
> 
> W.t2.df=coin.prep(resid.df.e,tx="Water",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "20" "30" "34" "45" "66" "68" "76" "80" "81"
[1] "N before dropping blocks: 2110"
[1] "N after dropping blocks: 2003"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "85"
> nrow(W.t2.df)
[1] 152
> set.seed(67890)
> W.t2.permtest=wilcoxsign_test(hcz~tr | block, data=W.t2.df,
+       distribution=approximate(B=100000))
> W.t2.perm.p=pvalue(W.t2.permtest)
> 
> S.t2.df=coin.prep(resid.df.e,tx="Sanitation",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "31" "46" "51" "58" "62" "69" "77" "81" "11"
[1] "N before dropping blocks: 2123"
[1] "N after dropping blocks: 2033"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85"
> nrow(S.t2.df)
[1] 152
> set.seed(67890)
> S.t2.permtest=wilcoxsign_test(hcz~tr | block, data=S.t2.df,
+       distribution=approximate(B=100000))
> S.t2.perm.p=pvalue(S.t2.permtest)
> 
> H.t2.df=coin.prep(resid.df.e,tx="Handwashing",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "30" "45" "47" "50" "52" "53" "61"
[1] "N before dropping blocks: 2082"
[1] "N after dropping blocks: 2000"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85"
> nrow(H.t2.df)
[1] 154
> set.seed(67890)
> H.t2.permtest=wilcoxsign_test(hcz~tr | block, data=H.t2.df,
+       distribution=approximate(B=100000))
> H.t2.perm.p=pvalue(H.t2.permtest)
> 
> WSH.t2.df=coin.prep(resid.df.e,tx="WSH",cont="Control",y="hcz")
[1] "Blocks dropped:"
 [1] "21" "23" "31" "46" "51" "53" "58" "62" "69" "11"
[1] "N before dropping blocks: 2111"
[1] "N after dropping blocks: 1991"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85"
> nrow(WSH.t2.df)
[1] 150
> set.seed(67890)
> WSH.t2.permtest=wilcoxsign_test(hcz~tr | block, data=WSH.t2.df,
+       distribution=approximate(B=100000))
> WSH.t2.perm.p=pvalue(WSH.t2.permtest)
> 
> N.t2.df=coin.prep(resid.df.e,tx="Nutrition",cont="Control",y="hcz")
[1] "Blocks dropped:"
 [1] "22" "29" "32" "49" "52" "54" "63" "70" "82" "11" "13" "83"
[1] "N before dropping blocks: 2066"
[1] "N after dropping blocks: 1926"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "85"
> nrow(N.t2.df)
[1] 150
> set.seed(67890)
> N.t2.permtest=wilcoxsign_test(hcz~tr | block, data=N.t2.df,
+       distribution=approximate(B=100000))
> N.t2.perm.p=pvalue(N.t2.permtest)
> 
> WSHN.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="Control",y="hcz")
[1] "Blocks dropped:"
[1] "20" "30" "46" "62" "69" "77" "81" "37" "82"
[1] "N before dropping blocks: 2128"
[1] "N after dropping blocks: 2037"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "40" "49" "65" "72" "80" "84" "85"
> nrow(WSHN.t2.df)
[1] 154
> set.seed(67890)
> WSHN.t2.permtest=wilcoxsign_test(hcz~tr | block, data=WSHN.t2.df,
+       distribution=approximate(B=100000))
> WSHN.t2.perm.p=pvalue(WSHN.t2.permtest)
> 
> hcz_t2_h1_pval_adj_j=data.frame(perm.pvalue=c(P.t2.perm.p,W.t2.perm.p,S.t2.perm.p,H.t2.perm.p,
+         WSH.t2.perm.p,N.t2.perm.p,WSHN.t2.perm.p))
> rownames(hcz_t2_h1_pval_adj_j)=c("Passive Control vs. C","Water vs. C",
+      "Sanitation vs. C", "Handwashing vs. C", "WSH vs. C",
+      "Nutrition vs. C", "Nutrition + WSH vs. C")
> 
> #----------------------------------------------
> # H3: P-value from permutation test for adjusted 
> # differences; WSHN vs. N and WSHN vs. WSH
> #----------------------------------------------
> # midline
> WSHN.N.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="Nutrition",y="hcz")
[1] "Blocks dropped:"
[1] "11" "13" "46" "75" "28" "37" "48" "51" "53"
[1] "N before dropping blocks: 1329"
[1] "N after dropping blocks: 1268"
[1] "Number of blocks included: 74"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "49" "51" "54" "56" "65" "72" "80" "84"
> nrow(WSHN.N.t1.df)
[1] 148
> set.seed(67890)
> WSHN.N.t1.permtest=wilcoxsign_test(hcz~tr | block, data=WSHN.N.t1.df,
+       distribution=approximate(B=100000))
> WSHN.N.t1.perm.p=pvalue(WSHN.N.t1.permtest)
> 
> WSHN.WSH.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="WSH",y="hcz")
[1] "Blocks dropped:"
[1] "11" "73" "77" "22" "36" "49" "51" "56" "78"
[1] "N before dropping blocks: 1383"
[1] "N after dropping blocks: 1324"
[1] "Number of blocks included: 73"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "80" "84"
[16] "85"
> nrow(WSHN.WSH.t1.df)
[1] 146
> set.seed(67890)
> WSHN.WSH.t1.permtest=wilcoxsign_test(hcz~tr | block, data=WSHN.WSH.t1.df,
+       distribution=approximate(B=100000))
> WSHN.WSH.t1.perm.p=pvalue(WSHN.WSH.t1.permtest)
> 
> hcz_t1_h3_pval_adj_j=data.frame(perm.pvalue=c(WSHN.N.t1.perm.p,WSHN.WSH.t1.perm.p))
> rownames(hcz_t1_h3_pval_adj_j)=c("Nutrition + WSH vs. Nutrition","Nutrition + WSH vs. WSH")
> 
> 
> # endline
> WSHN.N.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="Nutrition",y="hcz")
[1] "Blocks dropped:"
[1] "11" "13" "46" "75" "28" "37" "48" "51" "53"
[1] "N before dropping blocks: 1350"
[1] "N after dropping blocks: 1293"
[1] "Number of blocks included: 74"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "49" "51" "54" "56" "65" "72" "80" "84"
> nrow(WSHN.N.t2.df)
[1] 148
> set.seed(67890)
> WSHN.N.t2.permtest=wilcoxsign_test(hcz~tr | block, data=WSHN.N.t2.df,
+       distribution=approximate(B=100000))
> WSHN.N.t2.perm.p=pvalue(WSHN.N.t2.permtest)
> 
> WSHN.WSH.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="WSH",y="hcz")
[1] "Blocks dropped:"
[1] "11" "73" "77" "22" "36" "49" "51" "56" "78"
[1] "N before dropping blocks: 1395"
[1] "N after dropping blocks: 1332"
[1] "Number of blocks included: 73"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "80" "84"
[16] "85"
> nrow(WSHN.WSH.t2.df)
[1] 146
> set.seed(67890)
> WSHN.WSH.t2.permtest=wilcoxsign_test(hcz~tr | block, data=WSHN.WSH.t2.df,
+       distribution=approximate(B=100000))
> WSHN.WSH.t2.perm.p=pvalue(WSHN.WSH.t2.permtest)
> 
> hcz_t2_h3_pval_adj_j=data.frame(perm.pvalue=c(WSHN.N.t2.perm.p,WSHN.WSH.t2.perm.p))
> rownames(hcz_t2_h3_pval_adj_j)=c("Nutrition + WSH vs. Nutrition","Nutrition + WSH vs. WSH")
> 
> save(hcz_t1_h1_pval_adj_j,hcz_t1_h3_pval_adj_j,
+      file="~/Dropbox/WBK-primary-analysis/results/jade/hcz_t1_pval_adj.RData")
> 
> save(hcz_t2_h1_pval_adj_j,hcz_t2_h3_pval_adj_j,
+      file="~/Dropbox/WBK-primary-analysis/results/jade/hcz_t2_pval_adj.RData")
> 
> hcz_t1_h1_pval_adj_j
                      perm.pvalue
Passive Control vs. C     0.47689
Water vs. C               0.72051
Sanitation vs. C          0.27189
Handwashing vs. C         0.91145
WSH vs. C                 0.25590
Nutrition vs. C           0.74119
Nutrition + WSH vs. C     0.09821
> hcz_t1_h3_pval_adj_j
                              perm.pvalue
Nutrition + WSH vs. Nutrition     0.83417
Nutrition + WSH vs. WSH           0.04216
> hcz_t2_h1_pval_adj_j
                      perm.pvalue
Passive Control vs. C     0.39317
Water vs. C               0.61322
Sanitation vs. C          0.95261
Handwashing vs. C         0.84307
WSH vs. C                 0.28912
Nutrition vs. C           0.98940
Nutrition + WSH vs. C     0.18037
> hcz_t2_h3_pval_adj_j
                              perm.pvalue
Nutrition + WSH vs. Nutrition     0.95268
Nutrition + WSH vs. WSH           0.08232
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 32.142   1.357  33.878 
