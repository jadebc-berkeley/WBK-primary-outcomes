
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##############################################
> # WASH Benefits Kenya
> # Primary outcome analysis 
> 
> # whz adjusted analysis
> # Permutation tests: non-parametric Wilcoxon signed rank 
> # test statistic
> # 2-sided p-values
> 
> # Note: this code does not use the washb R package
> # However, the results are replicated with the washb_permute function
> 
> # by Jade (jadebc@berkeley.edu)
> ##############################################
> 
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-21
Package created on 2016-11-11

Warning message:
package ‘SuperLearner’ was built under R version 3.2.5 
> library(reshape2)
> library(coin)
Loading required package: survival
Warning message:
package ‘coin’ was built under R version 3.2.5 
> library(washb)
Welcome to the washb package
Version: 0.2.0
Created on 2016-10-12

The package's reference manual and vignette are also online:
https://ben-arnold.github.io/washb

> 
> rm(list=ls())
> m=read.csv("~/Dropbox/WASHB-Kenya-Data/1-primary-outcome-datasets/midline-anthro.csv",stringsAsFactors=TRUE)
> e=read.csv("~/Dropbox/WASHB-Kenya-Data/1-primary-outcome-datasets/endline-anthro.csv",stringsAsFactors=TRUE)
> 
> source("~/documents/crg/wash-benefits/kenya/src/primary/analysis/0-base-programs.R")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> m1=preprocess.anthro(m, y="whz")
> e1=preprocess.anthro(e, y="whz")
> 
> m2=preprocess.adj(m1,y="whz",time=1)
> e2=preprocess.adj(e1,y="whz",time=2)
> 
> # --------------------------------------
> # select covariates that are associated with the 
> # outcome
> # --------------------------------------
> W=c("month","HHS","aged","sex","mother_age","motherht","mother_edu",
+     "u18","Ncomp","water_time","floor","roof","cow",
+     "goat","chicken","dog","elec","radio","tv","mobilephone",
+     "clock","bicycle","motorcycle","stove","staffid")
> 
> W_screen_m=washb_prescreen(Y=m2$whz, Ws=m2[,W], family="gaussian")

Likelihood Ratio Test P-values:
            P-value
month       0.00000
HHS         0.41000
aged        0.00000
sex         0.15517
mother_age  0.01233
motherht    0.17272
mother_edu  0.00018
u18         0.00013
Ncomp       0.30015
water_time  0.22138
floor       0.10670
roof        0.77146
cow         0.01278
goat        0.52448
chicken     0.00845
dog         0.21233
elec        0.02664
radio       0.00826
tv          0.13282
mobilephone 0.00000
clock       0.37922
bicycle     0.04136
motorcycle  0.45826
stove       0.00005
staffid     0.00000


Covariates selected (P<0.2):
                 P-value
month       7.153879e-09
aged        2.833707e-12
sex         1.551652e-01
mother_age  1.232561e-02
motherht    1.727170e-01
mother_edu  1.812084e-04
u18         1.342419e-04
floor       1.066979e-01
cow         1.277723e-02
chicken     8.445317e-03
elec        2.663629e-02
radio       8.259376e-03
tv          1.328171e-01
mobilephone 9.209781e-07
bicycle     4.135639e-02
stove       4.736356e-05
staffid     7.116971e-15
> W_screen_e=washb_prescreen(Y=e2$whz, Ws=e2[,W], family="gaussian")

Likelihood Ratio Test P-values:
            P-value
month       0.00000
HHS         0.89865
aged        0.48294
sex         0.24288
mother_age  0.26093
motherht    0.00050
mother_edu  0.04010
u18         0.29191
Ncomp       0.15324
water_time  0.04797
floor       0.02356
roof        0.07769
cow         0.00589
goat        0.55655
chicken     0.36451
dog         0.13506
elec        0.41247
radio       0.91506
tv          0.35580
mobilephone 0.01227
clock       0.89531
bicycle     0.04697
motorcycle  0.79209
stove       0.00275
staffid     0.00000


Covariates selected (P<0.2):
                 P-value
month       1.771169e-06
motherht    4.964978e-04
mother_edu  4.009728e-02
Ncomp       1.532410e-01
water_time  4.797009e-02
floor       2.356258e-02
roof        7.768987e-02
cow         5.889168e-03
dog         1.350630e-01
mobilephone 1.227260e-02
bicycle     4.696763e-02
stove       2.751294e-03
staffid     5.718473e-09
> 
> # subset data frame to Ws selected in prescreening
> mW=m2[,c("block","whz","clusterid","hhid","childid","tr",W_screen_m)]
> eW=e2[,c("block","whz","clusterid","hhid","childid","tr",W_screen_e)]
> 
> # ensure relevant covariates are defined as factors, create indicators
> mW$block=as.factor(mW$block)
> eW$block=as.factor(eW$block)
> 
> mW$month=as.factor(mW$month)
> eW$month=as.factor(eW$month)
> 
> # subset to complete cases
> mW=mW[complete.cases(mW),]
> eW=eW[complete.cases(eW),]
> 
> # reordering datasets
> mW=mW[order(mW$block,mW$clusterid,mW$hhid,mW$childid),]
> eW=eW[order(eW$block,eW$clusterid,eW$hhid,eW$childid),]
> 
> #-------------------------------------------
> # run SuperLearner
> #-------------------------------------------
> # define SuperLearner libraries
> SL.library<-list("SL.mean","SL.glm","SL.bayesglm","SL.gam","SL.glmnet")
> # for adjusted permutation test, fit model of outcome
> # as a function of covariates excluding treatment assignment
> 
> sl.m=sl.prep(mW,y="whz")

Number of obs in analysis data frame
[1] 5982
> sl.e=sl.prep(eW,y="whz")

Number of obs in analysis data frame
[1] 6184
> colnames(sl.m$A)
 [1] "aged"                       "motherage"                 
 [3] "motherht"                   "u18"                       
 [5] "cow"                        "chicken"                   
 [7] "month2"                     "month3"                    
 [9] "month4"                     "month5"                    
[11] "month6"                     "month10"                   
[13] "month11"                    "month12"                   
[15] "sexMale"                    "mothereduAnysecondary"     
[17] "mothereduCompleteprimary"   "floorCementconcrete"       
[19] "floorMissingDK"             "elecHaselectricity"        
[21] "radioHasradio"              "tvOwnsTV"                  
[23] "mobilephoneAnymobilephones" "bicycleHasbicycle"         
[25] "stoveHasstove"              "staffid2311"               
[27] "staffid2321"                "staffid3448"               
[29] "staffid3500"                "staffid4312"               
[31] "staffid4317"                "staffid4518"               
[33] "staffid4648"                "staffid5423"               
[35] "staffid7840"               
> colnames(sl.e$A)
 [1] "motherht"                   "Ncomp"                     
 [3] "watertime"                  "cow"                       
 [5] "dog"                        "month2"                    
 [7] "month3"                     "month4"                    
 [9] "month5"                     "month6"                    
[11] "month7"                     "month8"                    
[13] "month9"                     "month10"                   
[15] "month11"                    "month12"                   
[17] "mothereduAnysecondary"      "mothereduCompleteprimary"  
[19] "floorCementconcrete"        "floorMissingDK"            
[21] "roofIronother"              "mobilephoneAnymobilephones"
[23] "bicycleHasbicycle"          "stoveHasstove"             
[25] "staffid2321"                "staffid3448"               
[27] "staffid3500"                "staffid4312"               
[29] "staffid4317"                "staffid4648"               
[31] "staffid4838"                "staffid5423"               
[33] "staffid5451"                "staffid5605"               
[35] "staffid5618"                "staffid7838"               
[37] "staffid7840"                "staffid8217"               
[39] "staffid8247"                "staffid8601"               
[41] "staffid8603"               
> 
> # fit model
> set.seed(67890)
> sl.m.fit=SuperLearner(Y=sl.m$Y, X=sl.m$A, SL.library=SL.library,
+      id=sl.m$clusterid,family="gaussian",method="method.NNLS")
Loading required package: arm
Loading required package: MASS
Loading required package: Matrix
Loading required package: lme4

arm (Version 1.8-6, built: 2015-7-7)

Working directory is /Users/jadederong/Documents/CRG/wash-benefits/kenya/src/primary/analysis/4-whz

Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12

Loading required package: glmnet
Loaded glmnet 2.0-2

> sl.m.fit

Call:  
SuperLearner(Y = sl.m$Y, X = sl.m$A, family = "gaussian", SL.library = SL.library,  
    method = "method.NNLS", id = sl.m$clusterid) 


                    Risk     Coef
SL.mean_All     1.105822 0.168015
SL.glm_All      1.076765 0.000000
SL.bayesglm_All 1.076761 0.000000
SL.gam_All      1.073695 0.831985
SL.glmnet_All   1.076576 0.000000
> 
> set.seed(67890)
> sl.e.fit=SuperLearner(Y=sl.e$Y, X=sl.e$A, SL.library=SL.library,
+      id=sl.e$clusterid,family="gaussian",method="method.NNLS")
> sl.e.fit

Call:  
SuperLearner(Y = sl.e$Y, X = sl.e$A, family = "gaussian", SL.library = SL.library,  
    method = "method.NNLS", id = sl.e$clusterid) 


                     Risk      Coef
SL.mean_All     0.8606053 0.2530659
SL.glm_All      0.8531238 0.0000000
SL.bayesglm_All 0.8531182 0.0000000
SL.gam_All      0.8527431 0.5456499
SL.glmnet_All   0.8510662 0.2012841
> 
> # generate residuals
> resid.m=sl.m$Y - sl.m.fit$SL.predict
> resid.e=sl.e$Y - sl.e.fit$SL.predict
> 
> # save predicted values and treatment assignments in data frame
> resid.df.m=data.frame(block=mW$block,tr=mW$tr,whz=resid.m)
> resid.df.e=data.frame(block=eW$block,tr=eW$tr,whz=resid.e)
> 
> #----------------------------------------------
> # H1: P-value from permutation test for adjusted 
> # differences; each arm vs. control
> #----------------------------------------------
> # midline
> P.t1.df=coin.prep(resid.df.m,tx="Passive Control",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "23" "40" "49" "54" "56" "65" "72" "85" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2023"
[1] "N after dropping blocks: 1953"
[1] "Number of blocks included: 78"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "40" "49" "54" "56" "65" "72" "85"
> nrow(P.t1.df)
[1] 156
> set.seed(67890)
> P.t1.permtest=wilcoxsign_test(whz~tr | block, data=P.t1.df,
+     distribution=approximate(B=100000))
> P.t1.perm.p=pvalue(P.t1.permtest)
> 
> W.t1.df=coin.prep(resid.df.m,tx="Water",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2006"
[1] "N after dropping blocks: 1902"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "85"
> nrow(W.t1.df)
[1] 152
> set.seed(67890)
> W.t1.permtest=wilcoxsign_test(whz~tr | block, data=W.t1.df,
+       distribution=approximate(B=100000))
> W.t1.perm.p=pvalue(W.t1.permtest)
> 
> S.t1.df=coin.prep(resid.df.m,tx="Sanitation",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2004"
[1] "N after dropping blocks: 1927"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85"
> nrow(S.t1.df)
[1] 152
> set.seed(67890)
> S.t1.permtest=wilcoxsign_test(whz~tr | block, data=S.t1.df,
+       distribution=approximate(B=100000))
> S.t1.perm.p=pvalue(S.t1.permtest)
> 
> H.t1.df=coin.prep(resid.df.m,tx="Handwashing",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2004"
[1] "N after dropping blocks: 1930"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85"
> nrow(H.t1.df)
[1] 154
> set.seed(67890)
> H.t1.permtest=wilcoxsign_test(whz~tr | block, data=H.t1.df,
+       distribution=approximate(B=100000))
> H.t1.perm.p=pvalue(H.t1.permtest)
> 
> WSH.t1.df=coin.prep(resid.df.m,tx="WSH",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85" "11" "13"
[16] "20" "40" "85"
[1] "N before dropping blocks: 2037"
[1] "N after dropping blocks: 1925"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85"
> nrow(WSH.t1.df)
[1] 150
> set.seed(67890)
> WSH.t1.permtest=wilcoxsign_test(whz~tr | block, data=WSH.t1.df,
+       distribution=approximate(B=100000))
> WSH.t1.perm.p=pvalue(WSH.t1.permtest)
> 
> N.t1.df=coin.prep(resid.df.m,tx="Nutrition",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "11" "13" "20" "40"
[16] "85"
[1] "N before dropping blocks: 1984"
[1] "N after dropping blocks: 1854"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "85"
> nrow(N.t1.df)
[1] 150
> set.seed(67890)
> N.permtest=wilcoxsign_test(whz~tr | block, data=N.t1.df,
+       distribution=approximate(B=100000))
> N.t1.perm.p=pvalue(N.permtest)
> 
> WSHN.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2048"
[1] "N after dropping blocks: 1965"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "40" "49" "65" "72" "80" "84" "85"
> nrow(WSHN.t1.df)
[1] 154
> set.seed(67890)
> WSHN.t1.permtest=wilcoxsign_test(whz~tr | block, data=WSHN.t1.df,
+       distribution=approximate(B=100000))
> WSHN.t1.perm.p=pvalue(WSHN.t1.permtest)
> 
> whz_t1_h1_pval_adj_j=data.frame(perm.pvalue=c(P.t1.perm.p,W.t1.perm.p,S.t1.perm.p,H.t1.perm.p,
+         WSH.t1.perm.p,N.t1.perm.p,WSHN.t1.perm.p))
> rownames(whz_t1_h1_pval_adj_j)=c("Passive Control vs. C","Water vs. C",
+     "Sanitation vs. C", "Handwashing vs. C", "WSH vs. C",
+     "Nutrition vs. C", "Nutrition + WSH vs. C")
> 
> 
> # endline
> P.t2.df=coin.prep(resid.df.e,tx="Passive Control",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "23" "40" "49" "54" "56" "65" "72" "85" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2105"
[1] "N after dropping blocks: 2026"
[1] "Number of blocks included: 78"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "40" "49" "54" "56" "65" "72" "85"
> nrow(P.t2.df)
[1] 156
> set.seed(67890)
> P.t2.permtest=wilcoxsign_test(whz~tr | block, data=P.t2.df,
+       distribution=approximate(B=100000))
> P.t2.perm.p=pvalue(P.t2.permtest)
> 
> W.t2.df=coin.prep(resid.df.e,tx="Water",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2109"
[1] "N after dropping blocks: 1998"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "37" "40" "49" "70" "72" "80" "84" "85"
> nrow(W.t2.df)
[1] 152
> set.seed(67890)
> W.t2.permtest=wilcoxsign_test(whz~tr | block, data=W.t2.df,
+       distribution=approximate(B=100000))
> W.t2.perm.p=pvalue(W.t2.permtest)
> 
> S.t2.df=coin.prep(resid.df.e,tx="Sanitation",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2131"
[1] "N after dropping blocks: 2037"
[1] "Number of blocks included: 76"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "54" "61" "65" "72" "80" "84" "85"
> nrow(S.t2.df)
[1] 152
> set.seed(67890)
> S.t2.permtest=wilcoxsign_test(whz~tr | block, data=S.t2.df,
+       distribution=approximate(B=100000))
> S.t2.perm.p=pvalue(S.t2.permtest)
> 
> H.t2.df=coin.prep(resid.df.e,tx="Handwashing",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85" "11" "13" "20"
[16] "40" "85"
[1] "N before dropping blocks: 2087"
[1] "N after dropping blocks: 2004"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "33" "40" "49" "51" "54" "56" "57" "65" "85"
> nrow(H.t2.df)
[1] 154
> set.seed(67890)
> H.t2.permtest=wilcoxsign_test(whz~tr | block, data=H.t2.df,
+       distribution=approximate(B=100000))
> H.t2.perm.p=pvalue(H.t2.permtest)
> 
> WSH.t2.df=coin.prep(resid.df.e,tx="WSH",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85" "11" "13"
[16] "20" "40" "85"
[1] "N before dropping blocks: 2105"
[1] "N after dropping blocks: 1982"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "85"
> nrow(WSH.t2.df)
[1] 150
> set.seed(67890)
> WSH.t2.permtest=wilcoxsign_test(whz~tr | block, data=WSH.t2.df,
+       distribution=approximate(B=100000))
> WSH.t2.perm.p=pvalue(WSH.t2.permtest)
> 
> N.t2.df=coin.prep(resid.df.e,tx="Nutrition",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "11" "13" "20" "40"
[16] "85"
[1] "N before dropping blocks: 2076"
[1] "N after dropping blocks: 1934"
[1] "Number of blocks included: 75"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "51" "54" "56" "65" "72" "84" "85"
> nrow(N.t2.df)
[1] 150
> set.seed(67890)
> N.t2.permtest=wilcoxsign_test(whz~tr | block, data=N.t2.df,
+       distribution=approximate(B=100000))
> N.t2.perm.p=pvalue(N.t2.permtest)
> 
> WSHN.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="Control",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "11" "13" "20" "40" "85"
[1] "N before dropping blocks: 2139"
[1] "N after dropping blocks: 2044"
[1] "Number of blocks included: 77"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "33" "40" "49" "65" "72" "80" "84" "85"
> nrow(WSHN.t2.df)
[1] 154
> set.seed(67890)
> WSHN.t2.permtest=wilcoxsign_test(whz~tr | block, data=WSHN.t2.df,
+       distribution=approximate(B=100000))
> WSHN.t2.perm.p=pvalue(WSHN.t2.permtest)
> 
> whz_t2_h1_pval_adj_j=data.frame(perm.pvalue=c(P.t2.perm.p,W.t2.perm.p,S.t2.perm.p,H.t2.perm.p,
+         WSH.t2.perm.p,N.t2.perm.p,WSHN.t2.perm.p))
> rownames(whz_t2_h1_pval_adj_j)=c("Passive Control vs. C","Water vs. C",
+      "Sanitation vs. C", "Handwashing vs. C", "WSH vs. C",
+      "Nutrition vs. C", "Nutrition + WSH vs. C")
> 
> #----------------------------------------------
> # H3: P-value from permutation test for adjusted 
> # differences; WSHN vs. N and WSHN vs. WSH
> #----------------------------------------------
> # midline
> WSHN.N.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="Nutrition",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "20" "23" "30" "33" "40"
[16] "51" "54" "56" "65" "72" "84"
[1] "N before dropping blocks: 1324"
[1] "N after dropping blocks: 1265"
[1] "Number of blocks included: 74"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "49" "51" "54" "56" "65" "72" "80" "84"
> nrow(WSHN.N.t1.df)
[1] 148
> set.seed(67890)
> WSHN.N.t1.permtest=wilcoxsign_test(whz~tr | block, data=WSHN.N.t1.df,
+       distribution=approximate(B=100000))
> WSHN.N.t1.perm.p=pvalue(WSHN.N.t1.permtest)
> 
> WSHN.WSH.t1.df=coin.prep(resid.df.m,tx="Nutrition + WSH",cont="WSH",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "13" "20" "23" "25" "33"
[16] "40" "49" "54" "56" "61" "65" "72" "85"
[1] "N before dropping blocks: 1377"
[1] "N after dropping blocks: 1318"
[1] "Number of blocks included: 73"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "80" "84"
[16] "85"
> nrow(WSHN.WSH.t1.df)
[1] 146
> set.seed(67890)
> WSHN.WSH.t1.permtest=wilcoxsign_test(whz~tr | block, data=WSHN.WSH.t1.df,
+       distribution=approximate(B=100000))
> WSHN.WSH.t1.perm.p=pvalue(WSHN.WSH.t1.permtest)
> 
> whz_t1_h3_pval_adj_j=data.frame(perm.pvalue=c(WSHN.N.t1.perm.p,WSHN.WSH.t1.perm.p))
> rownames(whz_t1_h3_pval_adj_j)=c("Nutrition + WSH vs. Nutrition","Nutrition + WSH vs. WSH")
> 
> 
> # endline
> WSHN.N.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="Nutrition",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "20" "23" "30" "33" "40"
[16] "51" "54" "56" "65" "72" "84"
[1] "N before dropping blocks: 1359"
[1] "N after dropping blocks: 1301"
[1] "Number of blocks included: 74"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "30" "33" "40" "49" "51" "54" "56" "65" "72" "80" "84"
> nrow(WSHN.N.t2.df)
[1] 148
> set.seed(67890)
> WSHN.N.t2.permtest=wilcoxsign_test(whz~tr | block, data=WSHN.N.t2.df,
+       distribution=approximate(B=100000))
> WSHN.N.t2.perm.p=pvalue(WSHN.N.t2.permtest)
> 
> WSHN.WSH.t2.df=coin.prep(resid.df.e,tx="Nutrition + WSH",cont="WSH",y="whz")
[1] "Blocks dropped:"
 [1] "11" "13" "20" "23" "33" "49" "65" "72" "80" "84" "13" "20" "23" "25" "33"
[16] "40" "49" "54" "56" "61" "65" "72" "85"
[1] "N before dropping blocks: 1388"
[1] "N after dropping blocks: 1322"
[1] "Number of blocks included: 73"
[1] "List of blocks dropped:"
 [1] "11" "13" "20" "23" "25" "33" "40" "49" "54" "56" "61" "65" "72" "80" "84"
[16] "85"
> nrow(WSHN.WSH.t2.df)
[1] 146
> set.seed(67890)
> WSHN.WSH.t2.permtest=wilcoxsign_test(whz~tr | block, data=WSHN.WSH.t2.df,
+       distribution=approximate(B=100000))
> WSHN.WSH.t2.perm.p=pvalue(WSHN.WSH.t2.permtest)
> 
> whz_t2_h3_pval_adj_j=data.frame(perm.pvalue=c(WSHN.N.t2.perm.p,WSHN.WSH.t2.perm.p))
> rownames(whz_t2_h3_pval_adj_j)=c("Nutrition + WSH vs. Nutrition","Nutrition + WSH vs. WSH")
> 
> save(whz_t1_h1_pval_adj_j,whz_t1_h3_pval_adj_j,
+      file="~/Dropbox/WBK-primary-analysis/results/jade/whz_t1_pval_adj.RData")
> 
> save(whz_t2_h1_pval_adj_j,whz_t2_h3_pval_adj_j,
+      file="~/Dropbox/WBK-primary-analysis/results/jade/whz_t2_pval_adj.RData")
> 
> whz_t1_h1_pval_adj_j
                      perm.pvalue
Passive Control vs. C     0.74121
Water vs. C               0.80635
Sanitation vs. C          0.23797
Handwashing vs. C         0.71102
WSH vs. C                 0.79436
Nutrition vs. C           0.07467
Nutrition + WSH vs. C     0.01160
> whz_t1_h3_pval_adj_j
                              perm.pvalue
Nutrition + WSH vs. Nutrition     0.56308
Nutrition + WSH vs. WSH           0.04638
> whz_t2_h1_pval_adj_j
                      perm.pvalue
Passive Control vs. C     0.40946
Water vs. C               0.93966
Sanitation vs. C          0.21080
Handwashing vs. C         0.54051
WSH vs. C                 0.38769
Nutrition vs. C           0.69955
Nutrition + WSH vs. C     0.06755
> whz_t2_h3_pval_adj_j
                              perm.pvalue
Nutrition + WSH vs. Nutrition     0.51209
Nutrition + WSH vs. WSH           0.08655
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 31.469   2.428  34.997 
